>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Checking matrix is a list of list of integers or floats

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix = [[1, 2], [4, 5], [1, 2]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67], [1.33, 1.67], [0.33, 0.67]]

>>> matrix = [[1, 2, 3]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0]]

>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([1, 2, 3], 3))
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2 , "7", 3], [1, 2, 3, 5]]
>>> print(matrix, 3))
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]

>>> matrix = []
>>> print(matrix_divided(matrix, 3))
[]

Check if only one variable is passed

>>> matrix = [[1, 2], [4, 5]]
>>> print(matrix_divided(3))
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(float('nan')))
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Checking size of matrix

>>> matrix = [[1, 2], [4, 5]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67], [1.33, 1.67]]

>>> matrix = [[1, 2, 3, 5], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

>>> matrix = [[1, 2, 3], [4, 5, 6, 5]]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

Checking if div is a number or equal to 0

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 2))
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, "d"))
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, [2]))
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, float('nan')))
[[nan, nan, nan], [nan, nan, nan]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 2.1))
[[0.48, 0.95, 1.43], [1.9, 2.38, 2.86]]
